argo-cd:
  fullnameOverride: argocd

  controller:
    replicas: 1
    enableStatefulSet: true
    extraArgs:
      - --repo-server-timeout-seconds
      - "500"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
      rules:
        enabled: false
        spec:
          - alert: ArgoAppMissing
            expr: |
              absent(argocd_app_info)
            for: 15m
            labels:
              severity: critical
            annotations:
              summary: "[ArgoCD] No reported applications"
              description: >
                ArgoCD has not reported any applications data for the past 15 minutes which
                means that it must be down or not functioning properly.  This needs to be
                resolved for this cloud to continue to maintain state.
          - alert: ArgoAppNotSynced
            expr: |
              argocd_app_info{sync_status!="Synced"} == 1
            for: 12h
            labels:
              severity: warning
            annotations:
              summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
              description: >
                The application [{{`{{$labels.name}}`}} has not been synchronized for over
                12 hours which means that the state of this cloud has drifted away from the
                state inside Git.
    
    resources:
      requests:
        cpu: 250m
        memory: 1Gi
  
  dex:
    enabled: false

  server:
    extraArgs:
      - --insecure

    rbac:
      create: true
      policy.default: role:readonly
      policy.csv: |
          g, dieterbocklandt@gmail.com, role:admin
      scopes: '[email, group]'

    ingress:
      enabled: false
    # ingress:
    #   enabled: true
    #   ingressClassName: traefik
    #   annotations:
    #     traefik.ingress.kubernetes.io/router.entrypoints: websecure
    #     traefik.ingress.kubernetes.io/router.priority: "10"
    #     cert-manager.io/cluster-issuer: le-production
    #   hosts:
    #     - argocd.siliconsheep.se
    #   tls:
    #     - secretName: argocd-siliconsheep-se
    #       hosts: [argocd.siliconsheep.se]
    
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
  
  repoServer:
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 5
      targetCPUUtilizationPercentage: 75
      targetMemoryUtilizationPercentage: 75
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: argocd-repo-server
              topologyKey: kubernetes.io/hostname
            weight: 100
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    env:
      - name: "ARGOCD_EXEC_TIMEOUT"
        value: "5m"
    initContainers:
      - name: download-istioctl
        image: alpine:3
        command: [ sh, -c ]
        env:
          - name: ISTIO_VERSION
            value: "1.16.0"
        args:
          - apk add curl &&
            curl -L https://istio.io/downloadIstio | sh - &&
            cp ${ISTIO_VERSION}/bin/istioctl /custom-tools/istioctl
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools
    volumes:
      - name: custom-tools
        emptyDir: { }
    volumeMounts:
      - mountPath: /usr/local/bin/istioctl
        name: custom-tools
        subPath: istioctl
  
  applicationSet:
    enabled: true
    fullnameOverride: applicationset
    args:
      policy: create-update
  
  configs:
    cm:
      admin.enabled: "true"
      url: https://argocd.siliconsheep.se
      resource.compareoptions: |
        ignoreAggregatedRoles: true
      resource.customizations: |
        admissionregistration.k8s.io/MutatingWebhookConfiguration:
          ignoreDifferences: |
            jsonPointers:
              - /webhooks/0/clientConfig/caBundle
        apiregistration.k8s.io/APIService:
          ignoreDifferences: |
            jsonPointers:
              - /spec/caBundle
              - /metadata/annotations
        Service:
          health.lua: |
            hs = {}
            hs.status = "Healthy"
            return hs
        networking.k8s.io/Ingress:
          health.lua: |
            hs = {}
            hs.status = "Healthy"
            return hs